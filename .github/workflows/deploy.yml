name: Deploy to AWS ECR and App Runner

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get commit SHA
      id: vars
      run: echo "COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image
      run: |
        docker build -t $ECR_REPOSITORY:$COMMIT_SHA .

    - name: Push Docker image
      run: |
        docker push $ECR_REPOSITORY:$COMMIT_SHA

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply (create/update App Runner)
      run: terraform apply -auto-approve -var="image_tag=${{ env.COMMIT_SHA }}"

    - name: Get App Runner ARN from Terraform
      id: get_arn
      run: echo "SERVICE_ARN=$(terraform output -raw service_arn)" >> $GITHUB_ENV

    - name: Update App Runner service to new image
      run: |
        cat <<EOF > update.json
        {
          "ImageRepository": {
            "ImageIdentifier": "${{ env.ECR_REPOSITORY }}:${{ env.COMMIT_SHA }}",
            "ImageRepositoryType": "ECR"
          }
        }
        EOF

        aws apprunner update-service \
          --service-arn "$SERVICE_ARN" \
          --source-configuration file://update.json

        echo "üîé Aguardando App Runner finalizar deploy..."
        while true; do
          STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query 'Service.Status' --output text)
          echo "Status atual: $STATUS"
          if [ "$STATUS" == "RUNNING" ]; then
            echo "‚úÖ Deploy finalizado com sucesso!"
            break
          elif [ "$STATUS" == "FAILED" ]; then
            echo "‚ùå Deploy falhou!"
            exit 1
          else
            echo "‚è≥ Aguardando... (10s)"
            sleep 10
          fi
        done
